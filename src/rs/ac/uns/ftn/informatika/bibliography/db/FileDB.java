package rs.ac.uns.ftn.informatika.bibliography.db;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import rs.ac.uns.ftn.informatika.bibliography.filesrv.FileDTO;

@SuppressWarnings("serial")
public class FileDB implements Serializable{

  public FileDB() {
  }

  public static FileDTO getFileByID(Connection conn, int id) {
	FileDTO fileDTO = null;
	try {
      Statement stmt = conn.createStatement();
      ResultSet rset = stmt.executeQuery(
          "select RECORDID, FILENAME, FILENAMECLIENT, MIME, UPLOADER, LENGTH, DATEMODIFIED, LICENSE, TYPE, NOTE from FILE_STORAGE " +
          "WHERE ID=" + id);
      if (rset.next()) {
        String controlNumber = rset.getString(1);
        String filename = rset.getString(2);
        String filenameClient = rset.getString(3);
        String mime = rset.getString(4);
        String uploader = rset.getString(5);
        Long length = rset.getLong(6);
        Calendar dateModified = null;
		if (rset.getDate(7) != null) {
			dateModified = new GregorianCalendar();
			dateModified.setTimeInMillis(rset.getDate(7).getTime());
		}
        String license = rset.getString(8);
        String type = rset.getString(9);
        String note = rset.getString(10);
        fileDTO = new FileDTO(id, controlNumber, filename, filenameClient, mime, uploader, length, dateModified, license, type, note);
      } else {
        log.warn("FileDTO with id="+id+" not found in database.");
      }
      rset.close();
      stmt.close();
    } catch (SQLException ex) {
      log.fatal(ex);
    }
    return fileDTO;
  }
  
  public static List<FileDTO> getFilesByRecordControlNumber(Connection conn, String controlNumber) {  	
	List<FileDTO> retVal = new ArrayList<FileDTO>();
    try {
      Statement stmt = conn.createStatement();
      ResultSet rset = stmt.executeQuery(
          "select ID, FILENAME, FILENAMECLIENT, MIME, UPLOADER, LENGTH, DATEMODIFIED, LICENSE, TYPE, NOTE from FILE_STORAGE "+
          "where RECORDID like '" + controlNumber + "'");
      while (rset.next()) {
        int id = rset.getInt(1);
        String filename = rset.getString(2);
        String filenameClient = rset.getString(3);
        String mime = rset.getString(4);
        String uploader = rset.getString(5);
        Long length = rset.getLong(6);
        Calendar dateModified = null;
		if (rset.getDate(7) != null) {
			dateModified = new GregorianCalendar();
			dateModified.setTimeInMillis(rset.getDate(7).getTime());
		}
        String license = rset.getString(8);
        String type = rset.getString(9);
        String note = rset.getString(10);
        retVal.add(new FileDTO(id, controlNumber, filename, filenameClient, mime, uploader, length, dateModified, license, type, note));               
      }
      rset.close();
      stmt.close();
    } catch (SQLException ex) {    		
      log.fatal(ex);
    }
    return retVal;
  }
  
  public boolean add(Connection conn, FileDTO fileDTO) {
    boolean retVal = false;
	try {
      PreparedStatement stmt = conn.prepareStatement(
          "insert into FILE_STORAGE (RECORDID, FILENAME, FILENAMECLIENT, MIME, UPLOADER, LENGTH, DATEMODIFIED, LICENSE, TYPE, NOTE) " +
          "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
          new String[] { "ID" });
      stmt.setString(1, fileDTO.getControlNumber());
      stmt.setString(2, fileDTO.getFileName());
      stmt.setString(3, fileDTO.getFileNameClient());
      stmt.setString(4, fileDTO.getMime());
      stmt.setString(5, fileDTO.getUploader());
      stmt.setLong(6, fileDTO.getLength());
      Calendar lastModificationDate = fileDTO.getDateModified();
		if (lastModificationDate == null)
			stmt.setNull(7, Types.DATE);
		else
			stmt.setDate(7, new java.sql.Date(lastModificationDate
					.getTime().getTime()));
      stmt.setString(8, fileDTO.getLicense());
      stmt.setString(9, fileDTO.getType());
      stmt.setString(10, fileDTO.getNote());
      stmt.executeUpdate();      
      ResultSet rset = stmt.getGeneratedKeys();
      if (rset.next()) {
        fileDTO.setId(rset.getInt(1));
      } else {
        log.fatal("Unable to fetch autogenerated key for " + this);
      }
      rset.close();
      stmt.close();
      retVal = true;
    } catch (SQLException ex) {
      log.fatal(ex);      
    }
    return retVal;
  }
  
  public boolean update(Connection conn, FileDTO fileDTO) {
    boolean retVal = false;
	try {
      PreparedStatement stmt = conn.prepareStatement(
          "update FILE_STORAGE set RECORDID=?, FILENAME=?, FILENAMECLIENT=?, MIME=?, UPLOADER=?, LENGTH=?, DATEMODIFIED=?, LICENSE=?, TYPE=?, NOTE=? " +
          "where ID=?");
      stmt.setString(1, fileDTO.getControlNumber());
      stmt.setString(2, fileDTO.getFileName());
      stmt.setString(3, fileDTO.getFileNameClient());
      stmt.setString(4, fileDTO.getMime());
      stmt.setString(5, fileDTO.getUploader());
      stmt.setLong(6, fileDTO.getLength());
      Calendar lastModificationDate = fileDTO.getDateModified();
		if (lastModificationDate == null)
			stmt.setNull(7, Types.DATE);
		else
			stmt.setDate(7, new java.sql.Date(lastModificationDate
					.getTime().getTime()));
      stmt.setString(8, fileDTO.getLicense());
      stmt.setString(9, fileDTO.getType());
      stmt.setString(10, fileDTO.getNote());
      stmt.setInt(11, fileDTO.getId());
      stmt.executeUpdate();      
      stmt.close();
      retVal = true;
    } catch (SQLException ex) {
      log.fatal(ex);
    }
    return retVal;
  }
  
  public boolean delete(Connection conn, String controlNumber){
  	try{
  		Statement stmt = conn.createStatement();
  		int deletedRowsNum = stmt.executeUpdate("delete from FILE_STORAGE where RECORDID like '"+controlNumber + "'");
  		if(deletedRowsNum==0){
  			return false;
  		}  	
  		stmt.close();
  		return true;
  	}catch(SQLException ex){
  		log.fatal(ex);
  		return false;
  	}
  }
  
  public boolean delete(Connection conn, int id){
	try{
		Statement stmt = conn.createStatement();
		int deletedRowsNum = stmt.executeUpdate("delete from FILE_STORAGE where ID="+id);
		if(deletedRowsNum==0){
			return false;
		}  	
		stmt.close();
		return true;
	}catch(SQLException ex){
		log.fatal(ex);
		return false;
	}  	
  }
  
  public boolean delete(Connection conn, FileDTO file){
	try{
		Statement stmt = conn.createStatement();
		int deletedRowsNum = stmt.executeUpdate("delete from FILE_STORAGE where ID="+file.getId());
		if(deletedRowsNum==0){
			return false;
		}  	
		stmt.close();
		return true;
	}catch(SQLException ex){
		log.fatal(ex);
		return false;
	}
  }

  private static Log log = LogFactory.getLog(FileDB.class.getName());

}
